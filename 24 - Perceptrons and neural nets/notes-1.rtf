{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red164\green191\blue255;\red23\green23\blue23;\red255\green255\blue255;
\red252\green115\blue96;\red117\green255\blue242;\red129\green131\blue134;\red254\green219\blue112;}
{\*\expandedcolortbl;;\cssrgb\c70196\c80000\c100000;\cssrgb\c11765\c11765\c11765;\cssrgb\c100000\c100000\c100000;
\cssrgb\c100000\c53725\c45098;\cssrgb\c51373\c100000\c96078;\cssrgb\c57647\c58431\c59608;\cssrgb\c100000\c87843\c51373;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28300\viewh17700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \'97 
\f1\fs28\fsmilli14080 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class Perceptron\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 def __init__\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 num_inputs\cf4 \strokec4 =\cf5 \strokec5 2\cf4 \strokec4 , \cf5 \strokec5 weights\cf4 \strokec4 =[\cf5 \strokec5 1\cf4 \strokec4 ,\cf5 \strokec5 1\cf4 \strokec4 ]):\cb1 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4  = \cf5 \strokec5 num_inputs\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4  = \cf5 \strokec5 weights\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3   \cf2 \strokec2 def weighted_sum\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 inputs\cf4 \strokec4 ):\cb1 \
\cb3     \cf5 \strokec5 weighted_sum\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4 ):\cb1 \
\cb3       \cf5 \strokec5 weighted_sum\cf4 \strokec4  += \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]*\cf5 \strokec5 inputs\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 def activation\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 weighted_sum\cf4 \strokec4 ):\cb1 \
\cb3     \cf7 \strokec7 #Complete this method\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 weighted_sum>\cf4 \strokec4 =\cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 -1\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 \strokec5 cool_perceptron\cf4 \strokec4  = \cf5 \strokec5 Perceptron\cf4 \strokec4 ()\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \cb3 \strokec7 #print(cool_perceptron.weighted_sum([24, 55]))\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3 print(\cf5 \strokec5 cool_perceptron\cf4 \strokec4 .\cf6 \strokec6 activation\cf4 \strokec4 (\cf5 \strokec5 52\cf4 \strokec4 ))\cb1 \
\
\
-\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 codecademylib3_seaborn\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 matplotlib\cf4 \strokec4 .\cf6 \strokec6 pyplot\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf5 \strokec5 plt\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 random\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 def generate_training_set\cf4 \strokec4 (\cf5 \strokec5 num_points\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 x_coordinates\cf4 \strokec4  = [\cf5 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 randint\cf4 \strokec4 (\cf5 \strokec5 0\cf4 \strokec4 , \cf5 \strokec5 50\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 num_points\cf4 \strokec4 )]\cb1 \
\cb3   \cf5 \strokec5 y_coordinates\cf4 \strokec4  = [\cf5 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 randint\cf4 \strokec4 (\cf5 \strokec5 0\cf4 \strokec4 , \cf5 \strokec5 50\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 num_points\cf4 \strokec4 )]\cb1 \
\cb3   \cf5 \strokec5 training_set\cf4 \strokec4  = dict()\cb1 \
\cb3   \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 x\cf4 \strokec4 , \cf5 \strokec5 y\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  zip(\cf5 \strokec5 x_coordinates\cf4 \strokec4 , \cf5 \strokec5 y_coordinates\cf4 \strokec4 ):\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 x\cf4 \strokec4  \cf5 \strokec5 <\cf4 \strokec4 = \cf5 \strokec5 45\cf4 \strokec4 -\cf5 \strokec5 y\cf4 \strokec4 :\cb1 \
\cb3       \cf5 \strokec5 training_set\cf4 \strokec4 [(\cf5 \strokec5 x\cf4 \strokec4 ,\cf5 \strokec5 y\cf4 \strokec4 )] = \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 elif\cf4 \strokec4  \cf5 \strokec5 x\cf4 \strokec4  \cf5 \strokec5 >\cf4 \strokec4  \cf5 \strokec5 45\cf4 \strokec4 -\cf5 \strokec5 y\cf4 \strokec4 :\cb1 \
\cb3       \cf5 \strokec5 training_set\cf4 \strokec4 [(\cf5 \strokec5 x\cf4 \strokec4 ,\cf5 \strokec5 y\cf4 \strokec4 )] = \cf5 \strokec5 -1\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 \strokec5 training_set\cf4 \strokec4  = \cf5 \strokec5 generate_training_set\cf4 \strokec4 (\cf5 \strokec5 30\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 x_plus\cf4 \strokec4  = []\cb1 \
\cf5 \cb3 \strokec5 y_plus\cf4 \strokec4  = []\cb1 \
\cf5 \cb3 \strokec5 x_minus\cf4 \strokec4  = []\cb1 \
\cf5 \cb3 \strokec5 y_minus\cf4 \strokec4  = []\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 data\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 [\cf5 \strokec5 data\cf4 \strokec4 ] == \cf5 \strokec5 1\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 x_plus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 0\cf4 \strokec4 ])\cb1 \
\cb3     \cf5 \strokec5 y_plus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 1\cf4 \strokec4 ])\cb1 \
\cb3   \cf2 \strokec2 elif\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 [\cf5 \strokec5 data\cf4 \strokec4 ] == \cf5 \strokec5 -1\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 x_minus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 0\cf4 \strokec4 ])\cb1 \
\cb3     \cf5 \strokec5 y_minus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 1\cf4 \strokec4 ])\cb1 \
\cb3     \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 \strokec5 fig\cf4 \strokec4  = \cf5 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 figure\cf4 \strokec4 ()\cb1 \
\cf5 \cb3 \strokec5 ax\cf4 \strokec4  = \cf5 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 axes\cf4 \strokec4 (\cf5 \strokec5 xlim\cf4 \strokec4 =(\cf5 \strokec5 -25\cf4 \strokec4 , \cf5 \strokec5 75\cf4 \strokec4 ), \cf5 \strokec5 ylim\cf4 \strokec4 =(\cf5 \strokec5 -25\cf4 \strokec4 , \cf5 \strokec5 75\cf4 \strokec4 ))\cb1 \
\
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 scatter\cf4 \strokec4 (\cf5 \strokec5 x_plus\cf4 \strokec4 , \cf5 \strokec5 y_plus\cf4 \strokec4 , \cf5 \strokec5 marker\cf4 \strokec4  = \cf8 \strokec8 '+'\cf4 \strokec4 , \cf5 \strokec5 c\cf4 \strokec4  = \cf8 \strokec8 'green'\cf4 \strokec4 , \cf5 \strokec5 s\cf4 \strokec4  = \cf5 \strokec5 128\cf4 \strokec4 , \cf5 \strokec5 linewidth\cf4 \strokec4  = \cf5 \strokec5 2\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 scatter\cf4 \strokec4 (\cf5 \strokec5 x_minus\cf4 \strokec4 , \cf5 \strokec5 y_minus\cf4 \strokec4 , \cf5 \strokec5 marker\cf4 \strokec4  = \cf8 \strokec8 '_'\cf4 \strokec4 , \cf5 \strokec5 c\cf4 \strokec4  = \cf8 \strokec8 'red'\cf4 \strokec4 , \cf5 \strokec5 s\cf4 \strokec4  = \cf5 \strokec5 128\cf4 \strokec4 , \cf5 \strokec5 linewidth\cf4 \strokec4  = \cf5 \strokec5 2\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 title\cf4 \strokec4 (\cf8 \strokec8 "Training Set"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 show\cf4 \strokec4 ()\cb1 \
\
\'97\cf2 \cb3 \strokec2 class Perceptron\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 def __init__\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 num_inputs\cf4 \strokec4 =\cf5 \strokec5 2\cf4 \strokec4 , \cf5 \strokec5 weights\cf4 \strokec4 =[\cf5 \strokec5 1\cf4 \strokec4 ,\cf5 \strokec5 1\cf4 \strokec4 ]):\cb1 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4  = \cf5 \strokec5 num_inputs\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4  = \cf5 \strokec5 weights\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3   \cf2 \strokec2 def weighted_sum\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 inputs\cf4 \strokec4 ):\cb1 \
\cb3     \cf5 \strokec5 weighted_sum\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4 ):\cb1 \
\cb3       \cf5 \strokec5 weighted_sum\cf4 \strokec4  += \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]*\cf5 \strokec5 inputs\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 def activation\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 weighted_sum\cf4 \strokec4 ):\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \strokec4  \cf5 \strokec5 >\cf4 \strokec4 = \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \strokec4  \cf5 \strokec5 <\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 -1\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3   \cf2 \strokec2 def training\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 training_set\cf4 \strokec4 ):\cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 inputs\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 :                   \cb1 \
\cb3       \cf5 \strokec5 prediction\cf4 \strokec4  = \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 activation\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weighted_sum\cf4 \strokec4 (\cf5 \strokec5 inputs\cf4 \strokec4 ))\cb1 \
\cb3       \cf5 \strokec5 actual\cf4 \strokec4  = \cf5 \strokec5 training_set\cf4 \strokec4 [\cf5 \strokec5 inputs\cf4 \strokec4 ]\cb1 \
\cb3       \cf5 \strokec5 error\cf4 \strokec4  = \cf5 \strokec5 actual\cf4 \strokec4  - \cf5 \strokec5 prediction\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 \strokec5 cool_perceptron\cf4 \strokec4  = \cf5 \strokec5 Perceptron\cf4 \strokec4 ()\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3 print(\cf5 \strokec5 cool_perceptron\cf4 \strokec4 .\cf6 \strokec6 weighted_sum\cf4 \strokec4 ([\cf5 \strokec5 24\cf4 \strokec4 , \cf5 \strokec5 55\cf4 \strokec4 ]))\cb1 \
\cb3 print(\cf5 \strokec5 cool_perceptron\cf4 \strokec4 .\cf6 \strokec6 activation\cf4 \strokec4 (\cf5 \strokec5 52\cf4 \strokec4 ))\
\
\'97\cf2 \strokec2 class Perceptron\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 def __init__\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 num_inputs\cf4 \strokec4 =\cf5 \strokec5 2\cf4 \strokec4 , \cf5 \strokec5 weights\cf4 \strokec4 =[\cf5 \strokec5 1\cf4 \strokec4 ,\cf5 \strokec5 1\cf4 \strokec4 ]):\cb1 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4  = \cf5 \strokec5 num_inputs\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4  = \cf5 \strokec5 weights\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3   \cf2 \strokec2 def weighted_sum\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 inputs\cf4 \strokec4 ):\cb1 \
\cb3     \cf5 \strokec5 weighted_sum\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4 ):\cb1 \
\cb3       \cf5 \strokec5 weighted_sum\cf4 \strokec4  += \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]*\cf5 \strokec5 inputs\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 def activation\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 weighted_sum\cf4 \strokec4 ):\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \strokec4  \cf5 \strokec5 >\cf4 \strokec4 = \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \strokec4  \cf5 \strokec5 <\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 -1\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3   \cf2 \strokec2 def training\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 training_set\cf4 \strokec4 ):\cb1 \
\cb3     \cf5 \strokec5 foundLine\cf4 \strokec4  = \cf2 \strokec2 False\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 while\cf4 \strokec4  \cf2 \strokec2 not\cf4 \strokec4  \cf5 \strokec5 foundLine\cf4 \strokec4 :\cb1 \
\cb3       \cf5 \strokec5 total_error\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 inputs\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 prediction\cf4 \strokec4  = \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 activation\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weighted_sum\cf4 \strokec4 (\cf5 \strokec5 inputs\cf4 \strokec4 ))\cb1 \
\cb3         \cf5 \strokec5 actual\cf4 \strokec4  = \cf5 \strokec5 training_set\cf4 \strokec4 [\cf5 \strokec5 inputs\cf4 \strokec4 ]\cb1 \
\cb3         \cf5 \strokec5 error\cf4 \strokec4  = \cf5 \strokec5 actual\cf4 \strokec4  - \cf5 \strokec5 prediction\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 total_error\cf4 \strokec4  += abs(\cf5 \strokec5 error\cf4 \strokec4 )\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4 ):\cb1 \
\cb3           \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]=\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]+(\cf5 \strokec5 error\cf4 \strokec4 *\cf5 \strokec5 inputs\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ])\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 total_error\cf4 \strokec4 ==\cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 foundLine\cf4 \strokec4 =\cf2 \strokec2 True\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cf5 \cb3 \strokec5 cool_perceptron\cf4 \strokec4  = \cf5 \strokec5 Perceptron\cf4 \strokec4 ()\cb1 \
\cf5 \cb3 \strokec5 small_training_set\cf4 \strokec4  = \{(\cf5 \strokec5 0\cf4 \strokec4 ,\cf5 \strokec5 3\cf4 \strokec4 ):\cf5 \strokec5 1\cf4 \strokec4 , (\cf5 \strokec5 3\cf4 \strokec4 ,\cf5 \strokec5 0\cf4 \strokec4 ):\cf5 \strokec5 -1\cf4 \strokec4 , (\cf5 \strokec5 0\cf4 \strokec4 ,\cf5 \strokec5 -3\cf4 \strokec4 ):\cf5 \strokec5 -1\cf4 \strokec4 , (\cf5 \strokec5 -3\cf4 \strokec4 ,\cf5 \strokec5 0\cf4 \strokec4 ):\cf5 \strokec5 1\cf4 \strokec4 \}\cb1 \
\cb3 print(\cf5 \strokec5 cool_perceptron\cf4 \strokec4 .\cf6 \strokec6 training\cf4 \strokec4 (\cf5 \strokec5 small_training_set\cf4 \strokec4 ))\cb1 \
\cb3 print(\cf5 \strokec5 cool_perceptron\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\'97\cf5 \cb3 \strokec5 lines\cf4 \strokec4  = []\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\cf2 \cb3 \strokec2 class Perceptron\cf4 \strokec4 :\cb1 \
\cb3   \cf2 \strokec2 def __init__\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 num_inputs\cf4 \strokec4 =\cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 weights\cf4 \strokec4 =[\cf5 \strokec5 1\cf4 \strokec4 ,\cf5 \strokec5 1\cf4 \strokec4 ,\cf5 \strokec5 1\cf4 \strokec4 ]):\cb1 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4  = \cf5 \strokec5 num_inputs\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4  = \cf5 \strokec5 weights\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 def weighted_sum\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 inputs\cf4 \strokec4 ):\cb1 \
\cb3     \cf5 \strokec5 weighted_sum\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4 ):\cb1 \
\cb3       \cf5 \strokec5 weighted_sum\cf4 \strokec4  += \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]*\cf5 \strokec5 inputs\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 def activation\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 weighted_sum\cf4 \strokec4 ):\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \strokec4  \cf5 \strokec5 >\cf4 \strokec4 = \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 weighted_sum\cf4 \strokec4  \cf5 \strokec5 <\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 -1\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 def training\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 , \cf5 \strokec5 training_set\cf4 \strokec4 ):\cb1 \
\cb3     \cf5 \strokec5 foundLine\cf4 \strokec4  = \cf2 \strokec2 False\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 while\cf4 \strokec4  \cf2 \strokec2 not\cf4 \strokec4  \cf5 \strokec5 foundLine\cf4 \strokec4 :\cb1 \
\cb3       \cf5 \strokec5 total_error\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 inputs\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 prediction\cf4 \strokec4  = \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 activation\cf4 \strokec4 (\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weighted_sum\cf4 \strokec4 (\cf5 \strokec5 inputs\cf4 \strokec4 ))\cb1 \
\cb3         \cf5 \strokec5 actual\cf4 \strokec4  = \cf5 \strokec5 training_set\cf4 \strokec4 [\cf5 \strokec5 inputs\cf4 \strokec4 ]\cb1 \
\cb3         \cf5 \strokec5 error\cf4 \strokec4  = \cf5 \strokec5 actual\cf4 \strokec4  - \cf5 \strokec5 prediction\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 total_error\cf4 \strokec4  += abs(\cf5 \strokec5 error\cf4 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 num_inputs\cf4 \strokec4 ):\cb1 \
\cb3           \cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ] += \cf5 \strokec5 error\cf4 \strokec4 *\cf5 \strokec5 inputs\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]\cb1 \
\
\cb3       \cf5 \strokec5 slope\cf4 \strokec4  = -\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 0\cf4 \strokec4 ]/\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 1\cf4 \strokec4 ]\cb1 \
\cb3       \cf5 \strokec5 intercept\cf4 \strokec4  = -\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 2\cf4 \strokec4 ]/\cf5 \strokec5 self\cf4 \strokec4 .\cf6 \strokec6 weights\cf4 \strokec4 [\cf5 \strokec5 1\cf4 \strokec4 ]\cb1 \
\cb3       \cf5 \strokec5 y1\cf4 \strokec4  = (\cf5 \strokec5 slope\cf4 \strokec4  * \cf5 \strokec5 0\cf4 \strokec4 ) + \cf5 \strokec5 intercept\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 y2\cf4 \strokec4  = (\cf5 \strokec5 slope\cf4 \strokec4  * \cf5 \strokec5 50\cf4 \strokec4 ) + \cf5 \strokec5 intercept\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 lines\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 ([[\cf5 \strokec5 0\cf4 \strokec4 ,\cf5 \strokec5 50\cf4 \strokec4 ], [\cf5 \strokec5 y1\cf4 \strokec4 , \cf5 \strokec5 y2\cf4 \strokec4 ]])\cb1 \
\
\cb3       \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 total_error\cf4 \strokec4  == \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 foundLine\cf4 \strokec4  = \cf2 \strokec2 True\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\'97\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 codecademylib3_seaborn\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 matplotlib\cf4 \strokec4 .\cf6 \strokec6 pyplot\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf5 \strokec5 plt\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 matplotlib\cf4 \strokec4 .\cf6 \strokec6 animation\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf5 \strokec5 animation\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 random\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 perceptron\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 Perceptron\cf4 \strokec4 , \cf5 \strokec5 lines\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 def generate_training_set\cf4 \strokec4 (\cf5 \strokec5 num_points\cf4 \strokec4 ):\cb1 \
\cb3   \cf5 \strokec5 x_coordinates\cf4 \strokec4  = [\cf5 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 randint\cf4 \strokec4 (\cf5 \strokec5 0\cf4 \strokec4 , \cf5 \strokec5 50\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 num_points\cf4 \strokec4 )]\cb1 \
\cb3   \cf5 \strokec5 y_coordinates\cf4 \strokec4  = [\cf5 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 randint\cf4 \strokec4 (\cf5 \strokec5 0\cf4 \strokec4 , \cf5 \strokec5 50\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 num_points\cf4 \strokec4 )]\cb1 \
\cb3   \cf5 \strokec5 training_set\cf4 \strokec4  = dict()\cb1 \
\cb3   \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 x\cf4 \strokec4 , \cf5 \strokec5 y\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  zip(\cf5 \strokec5 x_coordinates\cf4 \strokec4 , \cf5 \strokec5 y_coordinates\cf4 \strokec4 ):\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 x\cf4 \strokec4  \cf5 \strokec5 <\cf4 \strokec4 = \cf5 \strokec5 45\cf4 \strokec4 -\cf5 \strokec5 y\cf4 \strokec4 :\cb1 \
\cb3       \cf5 \strokec5 training_set\cf4 \strokec4 [(\cf5 \strokec5 x\cf4 \strokec4 ,\cf5 \strokec5 y\cf4 \strokec4 ,\cf5 \strokec5 1\cf4 \strokec4 )] = \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 elif\cf4 \strokec4  \cf5 \strokec5 x\cf4 \strokec4  \cf5 \strokec5 >\cf4 \strokec4  \cf5 \strokec5 45\cf4 \strokec4 -\cf5 \strokec5 y\cf4 \strokec4 :\cb1 \
\cb3       \cf5 \strokec5 training_set\cf4 \strokec4 [(\cf5 \strokec5 x\cf4 \strokec4 ,\cf5 \strokec5 y\cf4 \strokec4 ,\cf5 \strokec5 1\cf4 \strokec4 )] = \cf5 \strokec5 -1\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 training_set\cf4 \strokec4  = \cf5 \strokec5 generate_training_set\cf4 \strokec4 (\cf5 \strokec5 30\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 x_plus\cf4 \strokec4  = []\cb1 \
\cf5 \cb3 \strokec5 y_plus\cf4 \strokec4  = []\cb1 \
\cf5 \cb3 \strokec5 x_minus\cf4 \strokec4  = []\cb1 \
\cf5 \cb3 \strokec5 y_minus\cf4 \strokec4  = []\cb1 \
\
\cf2 \cb3 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 data\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 :\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 [\cf5 \strokec5 data\cf4 \strokec4 ] == \cf5 \strokec5 1\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 x_plus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 0\cf4 \strokec4 ])\cb1 \
\cb3     \cf5 \strokec5 y_plus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 1\cf4 \strokec4 ])\cb1 \
\cb3   \cf2 \strokec2 elif\cf4 \strokec4  \cf5 \strokec5 training_set\cf4 \strokec4 [\cf5 \strokec5 data\cf4 \strokec4 ] == \cf5 \strokec5 -1\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 x_minus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 0\cf4 \strokec4 ])\cb1 \
\cb3     \cf5 \strokec5 y_minus\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 1\cf4 \strokec4 ])\cb1 \
\
\cf5 \cb3 \strokec5 perceptron\cf4 \strokec4  = \cf5 \strokec5 Perceptron\cf4 \strokec4 ()\cb1 \
\cf5 \cb3 \strokec5 perceptron\cf4 \strokec4 .\cf6 \strokec6 training\cf4 \strokec4 (\cf5 \strokec5 training_set\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 fig\cf4 \strokec4  = \cf5 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 figure\cf4 \strokec4 ()\cb1 \
\cf5 \cb3 \strokec5 ax\cf4 \strokec4  = \cf5 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 axes\cf4 \strokec4 (\cf5 \strokec5 xlim\cf4 \strokec4 =(\cf5 \strokec5 -25\cf4 \strokec4 , \cf5 \strokec5 75\cf4 \strokec4 ), \cf5 \strokec5 ylim\cf4 \strokec4 =(\cf5 \strokec5 -25\cf4 \strokec4 , \cf5 \strokec5 75\cf4 \strokec4 ))\cb1 \
\cf5 \cb3 \strokec5 line\cf4 \strokec4 , = \cf5 \strokec5 ax\cf4 \strokec4 .\cf6 \strokec6 plot\cf4 \strokec4 ([], [], \cf5 \strokec5 lw\cf4 \strokec4 =\cf5 \strokec5 2\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 fig\cf4 \strokec4 .\cf6 \strokec6 patch\cf5 \strokec5 .\cf6 \strokec6 set_facecolor\cf4 \strokec4 (\cf8 \strokec8 '#ffc107'\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 scatter\cf4 \strokec4 (\cf5 \strokec5 x_plus\cf4 \strokec4 , \cf5 \strokec5 y_plus\cf4 \strokec4 , \cf5 \strokec5 marker\cf4 \strokec4  = \cf8 \strokec8 '+'\cf4 \strokec4 , \cf5 \strokec5 c\cf4 \strokec4  = \cf8 \strokec8 'green'\cf4 \strokec4 , \cf5 \strokec5 s\cf4 \strokec4  = \cf5 \strokec5 128\cf4 \strokec4 , \cf5 \strokec5 linewidth\cf4 \strokec4  = \cf5 \strokec5 2\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 scatter\cf4 \strokec4 (\cf5 \strokec5 x_minus\cf4 \strokec4 , \cf5 \strokec5 y_minus\cf4 \strokec4 , \cf5 \strokec5 marker\cf4 \strokec4  = \cf8 \strokec8 '_'\cf4 \strokec4 , \cf5 \strokec5 c\cf4 \strokec4  = \cf8 \strokec8 'red'\cf4 \strokec4 , \cf5 \strokec5 s\cf4 \strokec4  = \cf5 \strokec5 128\cf4 \strokec4 , \cf5 \strokec5 linewidth\cf4 \strokec4  = \cf5 \strokec5 2\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 title\cf4 \strokec4 (\cf8 \strokec8 'Iteration: 0'\cf4 \strokec4 )\cb1 \
\
\
\cf2 \cb3 \strokec2 def animate\cf4 \strokec4 (\cf5 \strokec5 i\cf4 \strokec4 ):\cb1 \
\cb3     print(\cf5 \strokec5 i\cf4 \strokec4 )\cb1 \
\cb3     \cf5 \strokec5 line\cf4 \strokec4 .\cf6 \strokec6 set_xdata\cf4 \strokec4 (\cf5 \strokec5 lines\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 0\cf4 \strokec4 ])  \cf7 \strokec7 # update the data\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 line\cf4 \strokec4 .\cf6 \strokec6 set_ydata\cf4 \strokec4 (\cf5 \strokec5 lines\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 1\cf4 \strokec4 ])  \cf7 \strokec7 # update the data\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 line\cf4 \strokec4 ,\cb1 \
\
\cf2 \cb3 \strokec2 def init\cf4 \strokec4 ():\cb1 \
\cb3     \cf5 \strokec5 line\cf4 \strokec4 .\cf6 \strokec6 set_data\cf4 \strokec4 ([], [])\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 line\cf4 \strokec4 ,\cb1 \
\
\cf5 \cb3 \strokec5 ani\cf4 \strokec4  = \cf5 \strokec5 animation\cf4 \strokec4 .\cf6 \strokec6 FuncAnimation\cf4 \strokec4 (\cf5 \strokec5 fig\cf4 \strokec4 , \cf5 \strokec5 animate\cf4 \strokec4 , \cf5 \strokec5 frames\cf4 \strokec4 =\cf5 \strokec5 1\cf4 \strokec4 , \cf5 \strokec5 init_func\cf4 \strokec4 =\cf5 \strokec5 init\cf4 \strokec4 , \cf5 \strokec5 interval\cf4 \strokec4 =\cf5 \strokec5 50\cf4 \strokec4 , \cf5 \strokec5 blit\cf4 \strokec4 =\cf2 \strokec2 True\cf4 \strokec4 , \cf5 \strokec5 repeat\cf4 \strokec4 =\cf2 \strokec2 False\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 plt\cf4 \strokec4 .\cf6 \strokec6 show\cf4 \strokec4 ()\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
}